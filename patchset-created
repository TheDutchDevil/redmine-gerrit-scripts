#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright (c) 2008-2011 Tobias Hieta <tobias@hieta.se>
# Copyright (c) 2014      Rossen Apostolov <rossen@mochiron.org>
# Copyright (c) 2014      Nathan Cassee
#

# This is a simple Gerrit hook for updating Redmine with information about what changes
# are in Gerrit review.
#
# It parses the commit messages from Gerrit and looks for a Redmine issue in the style
# of "#1028".
#
# It then adds a informative message to the Redmine issue about the review URL and other
# data. It can also change the status of the issue to indicate that this issue is now
# under gerrit review.
#
# Script is tested with Redmine 2.4.1 and Gerrit 2.6.1


import optparse
from subprocess import check_output  # TODO: you'll need python 2.7 for this
import sys
import re
import httplib
import json
import config

def SendChangeAssociation(redmineId, options, changeStatus):
    if options.isdraft == str("true"):
        redminecomment = "Gerrit received a related DRAFT patchset '%s' for Issue #%d.\n" % (
            options.patchset, redmineId)
    else:
        redminecomment = "Some new code has been pushed to this issue #%d. Submitter is %s and the code can be found" \
                         " here: %s" % (redmineId, options.uploader, options.changeurl)

    jsonstruct = {"issue": {}}
    if changeStatus:
        jsonstruct["issue"]["status_id"] = "4"
        redminecomment = "Some nw code has been pushed to issue %d by %s and claims to resolve the issue. Code can be" \
                         " found here: %s" % (redmineId, options.uploader, options.changeurl)

    jsonstruct["issue"]["notes"] = redminecomment

    jsondata = json.dumps(jsonstruct)

    puturl = "/issues/%d.json" % (redmineid)

    if config.REDMINE_HOST_USING_SSL:
        connection = httplib.HTTPSConnection(config.REDMINE_HOST, config.REDMINE_HOST_PORT_NUMBER)
    else:
        connection = httplib.HTTPConnection(config.REDMINE_HOST, config.REDMINE_HOST_PORT_NUMBER)

    connection.request('PUT', puturl, jsondata,
                   {"Content-Type": "application/json", "X-Redmine-API-Key": config.REDMINE_API_KEY})
    response = connection.getresponse()

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-c', '--change', dest='changeid')
    parser.add_option('-u', '--change-url', dest='changeurl')
    parser.add_option('-p', '--project', dest='project')
    parser.add_option('-b', '--branch', dest='branch')
    parser.add_option('-s', '--uploader', dest='uploader')
    parser.add_option('-o', '--commit', dest='commit')
    parser.add_option('-a', '--patchset', dest='patchset')
    parser.add_option('-d', '--is-draft', dest='isdraft')
    parser.add_option('-t', '--topic', dest='topic')

    (options, x) = parser.parse_args(sys.argv)

    if options.project not in config.GERRIT_PROJECTS:
        print
        "wrong project %s" % options.project
        sys.exit(0)

    commitmsg = check_output(['git', 'cat-file', '-p', options.commit])
    if not commitmsg or len(commitmsg) < 10:
        print
        "no commit msg!"
        sys.exit(0)

    # update status only for the first patchset
    if int(options.patchset) != 1:
        print
        "This is not the first patchset (%s) for this issue (%s), will not update the status" % (
            options.patchset, options.changeurl)
        sys.exit(0)

    # Don't change the status, only put a note. Otherwise uncomment the lines below.
    IN_REVIEW_STATUS = None
    # for drafts, change the status to "In Progress"...
    #    if options.isdraft == str("true"):
    #        IN_REVIEW_STATUS = 2
    # ... otherwise change to "Fix Uploaded"
    #    else:
    #        IN_REVIEW_STATUS = 10

    regex = re.compile(config.REDMINE_ISSUE_ID_REGEX, re.IGNORECASE)

    regexResolved = re.compile(config.REDMINE_RESOLVED_ISSUE_REGEX, re.IGNORECASE)

    mgi = regex.finditer(commitmsg)

    for mg in mgi:
        redmineid = int(mg.group(1))
        if not redmineid or redmineid == 0:
            print("no issue set here")
            sys.exit(0)
        SendChangeAssociation(redmineid, options, False)

    mgi = regexResolved.finditer(commitmsg)

    for mg in mgi:
        redmineid = int(mg.group(0).split()[1])
        if not redmineid or redmineid == 0:
            sys.exit(0)
        SendChangeAssociation(redmineid, options, True)
    sys.exit(0)
